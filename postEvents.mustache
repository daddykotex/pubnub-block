/**
 * This Event Handler is expecting a message with at least those attributes:
 * {
 * 	"timestamp": "2017-05-29T14:53:12Z",
 * 	"id": "deviceId8",
 * 	"status": "online"
 * }
 */

{{{ token }}}

{{{ jsrequire }}}

{{{ jsauth }}}

/**
 * Send events to the mnubo's API
 *
 * An array of event looks like this:
 * [
 *   {
 *       "x_object":{"x_device_id":"vin1234999"},
 *       "x_event_type":"fooevent",
 *       "footimeseries": 34
 *   }
 * ]
 * https://smartobjects.mnubo.com/documentation/api_ingestion.html#post-api-v3-events
 * @param {string} eventsUri URI to the mnubo's Event API
 * @param {object} token token retrieved from the mnubo's API
 * @param {array} events an array of events to send to the mnubo's API
 */
function sendEvents(eventsUri, token, events) {
    // eslint-disable-next-line
    console.log('Sending events to mnubo API');

    const httpOptions = {
        method: 'POST',
        body: JSON.stringify(events),
        headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${token.access_token}`
        },
    };

    return XHR.fetch(eventsUri, httpOptions);
}

function onRequest(request) {
    /**
     * Sandbox: 'https://rest.sandbox.mnubo.com'
     * Production: 'https://rest.api.mnubo.com'
     */
    const baseUri = 'https://rest.sandbox.mnubo.com';

    const authUri = `${baseUri}/oauth/token`;
    const eventsUri = `${baseUri}/api/v3/events`;

    return retrieveAccessToken(authUri, clientId, clientSecret)
        .then((token) => {
            const device = request.message.id;
            const timestamp = request.message.timestamp;
            const status = request.message.status;

            const events = [
                {
                    x_object: { x_device_id: device },
                    x_event_type: 'event_type1',
                    x_timestamp: timestamp,
                    ts_text_attribute: status
                }
            ];

            return sendEvents(eventsUri, token, events);
        }).then(() => {
            return request.ok();
        }).catch((e) => {
            // eslint-disable-next-line
            console.error(e);
            return request.ok();
        });
}

export default onRequest;